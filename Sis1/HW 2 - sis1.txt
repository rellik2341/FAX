VERZIJA 1

JMP main

fifo: DW 0
size: DW 0
last: DW 0
first: DW 0

init:
		MOV [first], fifo	;[first] premaknem v fifo na DW 0 "CE SO OKLEPAJI "[]" DOSTOPAM DO POMNILNIKA"
		MOV [size], 0		;prvo dam [size] na 0
        MOV A, 10			;velikost je enaka init -> size = initSize;
        MOV B, 0			;prvi je 0 -> first = last = 0;
        MOV C, 0			;zadnji je 0
        
clear:
		MOV [first], 0		;first = last = 0;
        MOV [last], 0	
        RET
        
push:
		POP D	;povratni naslov
        POP A	;fifo[last] = x;
        PUSH D	;vrni povratni naslov
        		;if (++last >= size) last = 0;
        CALL lastElement
        
lastElement:
		MOV [last], 0	;last = 0; v pushu piše: "zadnji element enak 0"! ideja: Klicali to funkcijo in ga resetirali
        RET
        
main:
		MOV SP, 0x02df	;inicializacija sklada
        ;MOV A, 10		;na A postavim vrednost 10 "init size"
        CALL init
		JMP finish
        
finish:
		HLT


_______________________________________________________________________________________________________________________
VERZIJA 2


JMP main

fifo: DW 0	;int fifo[MAX_SIZE] ?;
size: DW 0	;int size;
last: DW 0	;int last;
first: DW 0	;int first;

init:
		MOV [first], fifo	;[first] premaknem v fifo na DW 0 "CE SO OKLEPAJI "[]" DOSTOPAM DO POLNILNIKA"
		MOV [size], 0		;prvo dam [size] na 0, da lahko vstavim vrednost -> A
        MOV A, 10			;velikost je enaka init -> size = initSize;
        MOV B, 0			;prvi je 0 -> first = last = 0;
        MOV C, 0			;zadnji je 0
        
clear:
		MOV [first], 0		;first = last = 0;
        MOV [last], 0	
        RET
        
push:
		POP D	;povratni naslov
        POP A	;fifo[last] = x;
        PUSH D	;vrni povratni naslov
        		;if (++last >= size) last = 0;
        CALL lastElement
        
lastElement:
		MOV [last], 0	;last = 0; v pushu piše: "zadnji element enak 0"! ideja: Klicali to funkcijo in ga resetirali
        RET
        
main:
		MOV SP, 0x02df	;inicializacija sklada
        ;MOV A, 10		;na A postavim vrednost 10 "init size"
        CALL clear
        CALL init
		CALL push
		JMP finish
        
finish:
		HLT

____________________________________________________________________________________________________________________
VERZIJA 3

JMP main

fifo: DW 0
size: DW 0
last: DW 0
first: DW 0

init:
		MOV [first], fifo	;[first] premaknem v fifo na DW 0 "CE SO OKLEPAJI "[]" DOSTOPAM DO POMNILNIKA"
		MOV [size], 0		;prvo dam [size] na 0
        MOV A, 10			;velikost je enaka init -> size = initSize;
        MOV [size], A		;Vrednosti ki je v A premaknem na size
        MOV B, 0			;prvi je 0 -> first = last = 0;
        MOV C, 0			;zadnji je 0
        
clear:
		MOV [first], 0		;first = last = 0; Prekopira vrednost 0 na [first]
        MOV [last], 0	
        RET
        
push:
		POP D			;povratni naslov
        POP A			;fifo[last] = x; -> Pops a 16-bits value from the top of the stack and stores it into the 16-bits register referenced by Operand 1
        ;PUSH D			;vrni povratni naslov -> iz nekega razloga se mi na displayu izpiše CRKA
        MOV C, fifo		;if (++last >= size) last = 0;
        ADD C, [last]
        MOV [C], A
        MOV C, [last]
        INC C
        MOV D, [size]
        CMP C, D
        JAE lastElement
        PUSH D			;vrni povratni naslov -> vrne vrednost: A
        RET
            
lastElement:
		MOV [last], 0	;last = 0; v pushu piše: "zadnji element enak 0"! ideja: Klicali to funkcijo in ga resetirali
        RET
        
pop:
		POP D
        POP A
        PUSH D
main:
		MOV SP, 0x02df	;inicializacija sklada
        ;MOV A, 10		;na A postavim vrednost 10 "init size"
        CALL clear
        CALL init
        CALL push
		JMP finish
        
finish:
		HLT


_____________________________________________________________________________________________________
VERZIJA 4

JMP main

fifo: DW 0
size: DW 0
last: DW 0
first: DW 0

init:
		MOV [first], fifo	;[first] premaknem v fifo na DW 0 "CE SO OKLEPAJI "[]" DOSTOPAM DO POMNILNIKA"
		MOV [size], 0		;prvo dam [size] na 0
        MOV A, 10			;velikost je enaka init -> size = initSize;
        MOV [size], A		;Vrednosti ki je v A premaknem na size
        MOV B, 0			;prvi je 0 -> first = last = 0;
        MOV C, 0			;zadnji je 0
        
clear:
		MOV [first], 0		;first = last = 0; Prekopira vrednost 0 na [first]
        MOV [last], 0	
        RET
        
push:
		POP D			;povratni naslov
        POP A			;fifo[last] = x; -> Pops a 16-bits value from the top of the stack and stores it into the 16-bits register referenced by Operand 1
        ;PUSH D			;vrni povratni naslov -> iz nekega razloga se mi na displayu izpiše CRKA
        MOV C, fifo		;if (++last >= size) last = 0;
        ADD C, [last]
        MOV [C], A
        MOV C, [last]
        INC C
        MOV D, [size]	;vrednost size dam v D
        CMP C, D
        JAE lastElement
        PUSH D			;ker smo dali size v D -> vrne vrednost: A, ki je naš SIZE!
        RET
            
lastElement:
		MOV [last], 0	;last = 0; v pushu piše: "zadnji element enak 0"! ideja: Klicali to funkcijo in ga resetirali
        RET
        
pop:

main:
		MOV SP, 0x02df	;inicializacija sklada
        ;MOV A, 10		;na A postavim vrednost 10 "init size"
        CALL clear
        CALL init
        CALL push
		JMP finish
        
finish:
		HLT

_____________________________________________________________________________________________________________
VERZIJA 5

JMP main

fifo:   DW 0
size: DW 0
last: DW 0
first: DW 0

init:
		MOV [first], fifo	;fifo premaknem v [first] "CE SO OKLEPAJI "[]" DOSTOPAM DO POMNILNIKA"
		MOV [size], 0		;prvo dam [size] na 0
        MOV [size], A		;vrednost, ki je v A je skopirana na [size]
        MOV [first], 0		;prvi je 0 -> first = last = 0;
        MOV [last], 0		;zadnji je 0
        
clear:
		MOV [first], 0		;first = last = 0; Prekopira vrednost 0 na [first]
        MOV [last], 0	
        RET
        
push:
		POP D			;povratni naslov
        POP A			;fifo[last] = x; -> Pops a 16-bits value from the top of the stack and stores it into the 16-bits register referenced by Operand 1
        PUSH D			;vrni povratni naslov
       
        MOV C, fifo		;if (++last >= size) last = 0;
        ADD C, [last]	;seštejem C in [last]
        MOV [C], A
        MOV C, [last]	;[last] v C
        INC C			;povecam C oz [last]
        MOV D, [size]	;vrednost size dam v D
        CMP C, D
        JAE lastElement
       ;PUSH D			;ker smo dali size v D -> vrne vrednost: A, ki je naš SIZE!
        RET
            
lastElement:
		MOV [last], 0	;last = 0; klicem, da ga postavim na 0
        RET 
        
pop:
		MOV C, fifo
        ADD C, [first]
        MOV [C], A
        MOV C, [first]
        INC C
        MOV D, [size]
        CMP C, D		;if (++first >= size)
        JAE firstElement
        JMP returnX
        
returnX:
		MOV A, C	;vrni x v A
        RET
        
firstElement:
		MOV [first], 0	;first = 0; klicem, da ga postavim na 0
        RET
        
queue:
	CALL init		;pripravim za vrsto da jo zapolnim s števili

loop:
	ADD A, 1 		;vsakic ko dobim A ga povecam za 1
    CMP A, 10 		;primerjava ce je A manj ali enako 10
    JA break		;jump if above
    PUSH A 			;to pop out after call
    PUSH A 			;vrednost
    CALL push
    POP B 			;index izpišem na B, ker A dobi 11
    JMP loop
    
break:
	RET

main:
		MOV SP, 0x02df	;inicializacija sklada
		CALL queue
        JMP finish
        
finish:
		HLT

